{"version":3,"sources":["App.js","index.js"],"names":["Title","Typography","Paragraph","Text","Link","App","useState","mnemonic","setMnemonic","eth","setEth","astra","setAstra","useEffect","length","load","wallet","Wallet","fromMnemonic","getAddress","ethToAstra","className","defaultActiveKey","TabPane","tab","type","onClick","privateMnemonic","generateMnemonic","allowClear","placeholder","onPressEnter","e","target","value","message","error","level","style","margin","copyable","jsonString","encodeURIComponent","JSON","stringify","link","document","createElement","href","download","click","rootElement","getElementById","createRoot","render"],"mappings":"2YAYQA,EAAiCC,IAAjCD,MAAOE,EAA0BD,IAA1BC,UAA0BD,IAAfE,KAAeF,IAATG,KAEjB,SAASC,IACtB,MAAgCC,mBAAS,IAAG,mBAArCC,EAAQ,KAAEC,EAAW,KAC5B,EAAsBF,mBAAS,IAAG,mBAA3BG,EAAG,KAAEC,EAAM,KAClB,EAA0BJ,mBAAS,IAAG,mBAA/BK,EAAK,KAAEC,EAAQ,KACtBC,qBAAU,WACR,KAAIN,EAASO,OAAS,GAAtB,CAGA,IAAMC,EAAI,iDAAG,gGACiC,OAAtCC,EAASC,IAAOC,aAAaX,GAAU,EAAD,OACnBS,EAAOG,aAAa,KAAD,EAAtCA,EAAU,OAChBT,EAAOS,GACPP,EAASQ,qBAAWD,IAAa,2CAClC,kBALS,mCAMVJ,GAPA,CASF,GAAG,CAACR,IAoBJ,OACE,sBAAKc,UAAU,MAAK,UAClB,eAAC,IAAU,WACT,cAACrB,EAAK,kCACN,eAAC,IAAI,CAACsB,iBAAiB,SAAQ,UAC7B,cAAC,IAAKC,QAAO,CAACC,IAAI,eAAc,SAC9B,cAAC,IAAM,CACLC,KAAK,UACLC,QAAS,WACP,IAAMC,EAAkBC,2BAAiB,KACzCpB,EAAYmB,EACd,EAAE,uBAN+B,UAWrC,cAAC,IAAKJ,QAAO,CAACC,IAAI,wBAAuB,SACvC,cAAC,IAAK,CACJK,YAAU,EACVC,YAAY,iBACZC,aAAc,SAACC,GAEb,IACiBf,IAAOC,aAAaX,GACnCC,EAAYwB,EAAEC,OAAOC,MAGvB,CAFE,MAAOF,GACPG,IAAQC,MAAMJ,EAAEG,QAClB,CACF,KAZ0C,aAgBhD,cAAC,IAAO,IACR,cAAC,IAAWnC,MAAK,CAACqC,MAAO,EAAGC,MAAO,CAAEC,OAAQ,GAAI,sBAGhDhC,EAASO,OAAS,GAAK,cAACZ,EAAS,CAACsC,UAAQ,WAAEjC,IAC7C,cAAC,IAAWP,MAAK,CAACqC,MAAO,EAAGC,MAAO,CAAEC,OAAQ,GAAI,yBAGhD9B,EAAIK,OAAS,GAAK,cAACZ,EAAS,CAACsC,UAAQ,WAAE/B,IACxC,cAAC,IAAWT,MAAK,CAACqC,MAAO,EAAGC,MAAO,CAAEC,OAAQ,GAAI,2BAGhD5B,EAAMG,OAAS,GAAK,cAACZ,EAAS,CAACsC,UAAQ,WAAE7B,OAE5C,cAAC,IAAM,CAACc,KAAK,UAAUC,QAhER,WACjB,IAAMe,EAAU,uCAAmCC,mBACjDC,KAAKC,UACH,CACErC,WACAE,MACAE,SAEF,KACA,KAGEkC,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,SAAW,cAChBJ,EAAKK,OACP,EAgD+C,2BAKjD,CChGA,IAAMC,EAAcL,SAASM,eAAe,QAC/BC,qBAAWF,GAEnBG,OACH,cAAC,aAAU,UACT,cAACjD,EAAG,M","file":"static/js/main.e51f5efe.chunk.js","sourcesContent":["import 'antd/dist/reset.css';\nimport './styles.css';\nimport React from 'react';\nimport { Divider, Typography, Tabs, Button, Input, message } from 'antd';\nimport { useEffect, useState } from 'react';\n\nimport { Wallet } from '@ethersproject/wallet';\nimport { ethToAstra } from '@astradefi/address-converter';\nimport { generateMnemonic } from 'bip39';\n\nconst generateKey = async (mnemonic) => {};\n\nconst { Title, Paragraph, Text, Link } = Typography;\n\nexport default function App() {\n  const [mnemonic, setMnemonic] = useState('');\n  const [eth, setEth] = useState('');\n  const [astra, setAstra] = useState('');\n  useEffect(() => {\n    if (mnemonic.length < 1) {\n      return;\n    }\n    const load = async () => {\n      const wallet = Wallet.fromMnemonic(mnemonic);\n      const getAddress = await wallet.getAddress();\n      setEth(getAddress);\n      setAstra(ethToAstra(getAddress));\n    };\n    load();\n    return;\n  }, [mnemonic]);\n\n  const exportData = () => {\n    const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n      JSON.stringify(\n        {\n          mnemonic,\n          eth,\n          astra,\n        },\n        null,\n        4\n      )\n    )}`;\n    const link = document.createElement('a');\n    link.href = jsonString;\n    link.download = 'secret.json';\n    link.click();\n  };\n\n  return (\n    <div className=\"App\">\n      <Typography>\n        <Title>Astra Key Generator</Title>\n        <Tabs defaultActiveKey=\"item-1\">\n          <Tabs.TabPane tab=\"Generate key\" key=\"item-1\">\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                const privateMnemonic = generateMnemonic(256);\n                setMnemonic(privateMnemonic);\n              }}\n            >\n              Generate\n            </Button>\n          </Tabs.TabPane>\n          <Tabs.TabPane tab=\"Get key from Mnemonic\" key=\"item-2\">\n            <Input\n              allowClear\n              placeholder=\"Enter Mnemonic\"\n              onPressEnter={(e) => {\n                // console.log(e.target.value);\n                try {\n                  const wallet = Wallet.fromMnemonic(mnemonic);\n                  setMnemonic(e.target.value);\n                } catch (e) {\n                  message.error(e.message);\n                }\n              }}\n            />\n          </Tabs.TabPane>\n        </Tabs>\n        <Divider />\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          Mnemonic\n        </Typography.Title>\n        {mnemonic.length > 0 && <Paragraph copyable>{mnemonic}</Paragraph>}\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          ETH Address\n        </Typography.Title>\n        {eth.length > 0 && <Paragraph copyable>{eth}</Paragraph>}\n        <Typography.Title level={5} style={{ margin: 0 }}>\n          Astra Address\n        </Typography.Title>\n        {astra.length > 0 && <Paragraph copyable>{astra}</Paragraph>}\n      </Typography>\n      <Button type=\"primary\" onClick={exportData}>\n        Save backup\n      </Button>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}